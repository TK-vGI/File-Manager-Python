import os
import shutil

# run the user's program in our generated folders
os.chdir('module/root_folder')


def format_size(size):
    if size < 1024:
        return f"{size}B"
    elif size < 1024 ** 2:
        return f"{round(size / 1024)}KB"
    elif size < 1024 ** 3:
        return f"{round(size / 1024 ** 2)}MB"
    else:
        return f"{round(size / 1024 ** 3)}GB"


def file_manager():
    print("Input the command")

    while True:
        try:
            usr = input()
            match usr.split():
                case ['quit']:
                    # Exits program
                    break

                case ['pwd']:
                    # Print absolute path of the current directory
                    print(os.getcwd())

                case ['cd ..']:
                    # Moves one directory up
                    parent_dir = os.path.dirname(os.getcwd())
                    os.chdir(parent_dir)
                    print(os.path.basename(parent_dir))

                case ['cd', path]:
                    # Move to the folder specified by the user
                    if os.path.isdir(path):
                        os.chdir(path)
                        print(os.path.basename(os.getcwd()))
                    else:
                        print("Error: Directory does not exist")

                case ['ls'] | ['ls', '-l'] | ['ls', '-lh']:
                    # "ls" List files and subdirectories
                    # "ls -l" List files with sizes in bytes
                    # "ls -lh" List files with human-readable sizes
                    items = os.listdir()
                    directories = [item for item in items if os.path.isdir(item)]
                    files = [item for item in items if os.path.isfile(item)]

                    if not directories and not files:
                        break

                    for directory in directories:
                        print(directory)

                    for file in files:
                        size = os.stat(file).st_size
                        if usr == 'ls -lh':
                            size_str = format_size(size)
                            print(f"{file} {size_str}")
                        elif usr == 'ls -l':
                            size_str = f"{size}B"
                            print(f"{file} {size_str}")
                        else:
                            print(file)  # Print file names only

                case ['rm', *path_usr]:
                    # Deletes folder or file
                    path = "".join(path_usr).strip() # Join parts in case of spaces

                    if path == "":  # Check if path is missing in command
                        print("Specify the file or directory")
                        return

                    if not os.path.exists(path):  # Check if the file or directory exists
                        print("No such file or directory")
                        return

                    try:
                        if os.path.isfile(path):
                            os.remove(path)  # Remove file
                            # print(f"File '{os.path.basename(path)}' deleted successfully")
                        elif os.path.isdir(path):
                            shutil.rmtree(path)  # Remove directory and its contents
                            # print(f"Directory '{os.path.basename(path)}' deleted successfully")
                    except shutil.Error as e:
                        print(f"Error: {e}")
                    except Exception as e:
                        print(f"Error deleting item: {e}")

                case ['mv', *names]:
                    # Rename folder or file
                    old_name = names[0] if len(names) > 0 else None
                    new_name = names[1] if len(names) > 1 else None
                    if not old_name or not new_name:  # Ensure both names are specified
                        print("Specify the current name of the file or directory and the new name")
                        return

                    if not os.path.exists(old_name):  # Check if the old file/folder exists
                        print("No such file or directory")
                        return

                    if os.path.exists(new_name):  # Check if the new name already exists
                        print("The file or directory already exists")
                        return

                    try:
                        os.rename(old_name, new_name)  # Rename the file or folder
                        # print(f"Renamed '{old_name}' to '{new_name}' successfully")
                    except Exception as e:
                        print(f"Error renaming item: {e}")

                case ['mkdir', *path_usr]:
                    # Create folder with absolute or relative path
                    path = "".join(path_usr).strip()

                    if path == "":  # Check if path is missing in command
                        print("Specify the name of the directory to be made")
                        return

                    if os.path.exists(path):  # Check if the directory already exists
                        print("The directory already exists")
                    else:
                        try:
                            os.makedirs(path)  # Create the directory
                            # print(f"Directory '{os.path.basename(path)}' created successfully")
                        except Exception as e:
                            print(f"Error creating directory: {e}")

                case _:
                    print('Invalid command')

        except FileNotFoundError:
            print('File or directory not found')


if __name__ == '__main__':
    file_manager()